// _mixins.scss: any mixins created for this project.
@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin background-img($imgpath, $x:0, $y:0, $repeat: no-repeat) {
  background: {
    image: url($imgpath);
    position: $x $y;
    repeat: $repeat;
  }
}

@mixin but {
  cursor: pointer;
  padding: ($v-rhythm / 4) 10px;
  @include font-size(16);
  line-height: 1.2;
  border-radius: 2px;
  text-align: center;
  font-weight: $font-regular;
  white-space: nowrap;
  &:hover {
    opacity: 0.8;
  }
}

@mixin primary-but {
  @include but();
  color: white;
  border: 0;
  background-color: $logo-blue;
  font-weight:normal;
  &:hover {
    opacity: 0.7;
    color: white;
  }
}

@mixin secondary-but {
  @include but();
  color: $logo-blue;
  background:white;
  border: 1px solid $logo-blue;
  font-weight:normal;
}

@mixin dark-grad($color: $logo-blue, $position: to bottom, $percentage: 7%) {
  background: linear-gradient($position, $color, darken($color, $percentage)), $color;
}

@mixin light-grad($color: $logo-blue, $position: to bottom, $percentage: 7%) {
  background: linear-gradient($position, lighten($color, $percentage), $color), $color;
}

@mixin legibility {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

// Fonts
@mixin font-size($sizeValue: 16) {
  font-size: $sizeValue + px;
  font-size: ($sizeValue / 16) + rem;
}

// opacity
@mixin opacity($opacity) {
  filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
  opacity: $opacity;
}

// input placeholder
@mixin placeholder($color : $primary_color) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}

// position
@mixin position($position: relative, $coordinates: 0 0 0 0) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }
  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);
  position: $position;
  @if $top == auto {
    top: $top;
  } @else if not(unitless($top)) {
    top: $top;
  }
  @if $right == auto {
    right: $right;
  } @else if not(unitless($right)) {
    right: $right;
  }
  @if $bottom == auto {
    bottom: $bottom;
  } @else if not(unitless($bottom)) {
    bottom: $bottom;
  }
  @if $left == auto {
    left: $left;
  } @else if not(unitless($left)) {
    left: $left;
  }
}

@mixin horizontal-list {
  list-style: none;
  margin: 0;
  padding: 0;
  border: 0;

  li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0;
    white-space: nowrap;
    float: left;
    padding-left: 4px;
    padding-right: 4px;

    &:first-child {
      padding-left: 0;
    }

    &:last-child {
      padding-right: 0;
    }
  }
}